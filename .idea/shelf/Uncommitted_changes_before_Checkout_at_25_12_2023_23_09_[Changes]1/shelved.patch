Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id 'com.github.johnrengelman.shadow' version '7.1.2'\r\n    id 'java'\r\n    id 'application'\r\n    id 'org.javamodularity.moduleplugin' version '1.8.12'\r\n    id 'org.openjfx.javafxplugin' version '0.0.13'\r\n    id 'org.beryx.jlink' version '2.25.0'\r\n}\r\n\r\nshadowJar {\r\n    archiveBaseName.set('app')\r\n    archiveClassifier.set('')\r\n    archiveVersion.set('')\r\n    manifest {\r\n        attributes 'Main-Class': 'org.example.demofour.HelloApplication'\r\n    }\r\n}\r\n\r\ngroup 'org.example'\r\nversion '1.0-SNAPSHOT'\r\n\r\nrepositories {\r\n    mavenCentral()\r\n}\r\n\r\next {\r\n    junitVersion = '5.10.0'\r\n}\r\n\r\n\r\ntasks.withType(JavaCompile) {\r\n    options.encoding = 'UTF-8'\r\n}\r\n\r\napplication {\r\n    mainModule = 'org.example.demofour'\r\n    mainClass = 'org.example.demofour.HelloApplication'\r\n}\r\n\r\njavafx {\r\n    version = '17.0.6'\r\n    modules = ['javafx.controls', 'javafx.fxml', 'javafx.web', 'javafx.swing']\r\n}\r\n\r\ndependencies {\r\n    implementation('org.controlsfx:controlsfx:11.1.2')\r\n    implementation('com.dlsc.formsfx:formsfx-core:11.6.0') {\r\n        exclude(group: 'org.openjfx')\r\n    }\r\n    implementation('org.kordamp.ikonli:ikonli-javafx:12.3.1')\r\n    implementation('org.kordamp.bootstrapfx:bootstrapfx-core:0.4.0')\r\n    implementation('eu.hansolo:tilesfx:11.48') {\r\n        exclude(group: 'org.openjfx')\r\n    }\r\n    // Here is your added dependency\r\n    implementation('org.fxmisc.richtext:richtextfx:0.10.6')\r\n\r\n    implementation 'org.openjfx:javafx-base:17.0.6'\r\n    implementation 'org.openjfx:javafx-controls:17.0.6'\r\n    implementation 'org.openjfx:javafx-fxml:17.0.6'\r\n    implementation 'org.openjfx:javafx-graphics:17.0.6'\r\n    implementation 'org.openjfx:javafx-media:17.0.6'\r\n    implementation 'org.openjfx:javafx-web:17.0.6'\r\n    implementation 'org.openjfx:javafx-swing:17.0.6'\r\n\r\n    testImplementation(\"org.junit.jupiter:junit-jupiter-api:${junitVersion}\")\r\n    testRuntimeOnly(\"org.junit.jupiter:junit-jupiter-engine:${junitVersion}\")\r\n}\r\n\r\ntest {\r\n    useJUnitPlatform()\r\n}\r\n\r\njlink {\r\n    imageZip = project.file(\"${buildDir}/distributions/app-${javafx.platform.classifier}.zip\")\r\n    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']\r\n    launcher {\r\n        name = 'app'\r\n    }\r\n}\r\n\r\njlinkZip {\r\n    group = 'distribution'\r\n}\r\n\r\njar {\r\n    manifest {\r\n        attributes 'Main-Class': 'org.example.demofour.HelloApplication'\r\n    }\r\n}\r\ncompileJava {\r\n    doFirst {\r\n        options.compilerArgs = [\r\n            '--module-path', classpath.asPath,\r\n            '--add-modules', 'javafx.controls,javafx.fxml'\r\n        ]\r\n    }\r\n}\r\n\r\nrun {\r\n    doFirst {\r\n        jvmArgs = [\r\n            '--module-path', classpath.asPath,\r\n            '--add-modules', 'javafx.controls,javafx.fxml'\r\n        ]\r\n    }\r\n}\r\n\r\ntasks.register('runApp', JavaExec) {\r\n    classpath = sourceSets.main.runtimeClasspath\r\n    main = 'org.example.demofour.HelloApplication'\r\n    jvmArgs = [\r\n            '--module-path', classpath.asPath,\r\n            '--add-modules', 'javafx.controls,javafx.fxml'\r\n    ]\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
--- a/build.gradle	
+++ b/build.gradle	
@@ -12,7 +12,7 @@
     archiveClassifier.set('')
     archiveVersion.set('')
     manifest {
-        attributes 'Main-Class': 'org.example.demofour.HelloApplication'
+        attributes 'Main-Class': 'org.example.demofour.Main'
     }
 }
 
@@ -34,7 +34,7 @@
 
 application {
     mainModule = 'org.example.demofour'
-    mainClass = 'org.example.demofour.HelloApplication'
+    mainClass = 'org.example.demofour.Main'
 }
 
 javafx {
@@ -85,7 +85,7 @@
 
 jar {
     manifest {
-        attributes 'Main-Class': 'org.example.demofour.HelloApplication'
+        attributes 'Main-Class': 'org.example.demofour.Main'
     }
 }
 compileJava {
@@ -108,7 +108,7 @@
 
 tasks.register('runApp', JavaExec) {
     classpath = sourceSets.main.runtimeClasspath
-    main = 'org.example.demofour.HelloApplication'
+    main = 'org.example.demofour.Main'
     jvmArgs = [
             '--module-path', classpath.asPath,
             '--add-modules', 'javafx.controls,javafx.fxml'
Index: src/main/java/org/example/demofour/MyExecutor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.demofour;\r\n\r\nimport java.io.*;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.nio.file.FileSystemException;\r\nimport java.util.function.Consumer;\r\n\r\npublic class MyExecutor {\r\n    private PrintWriter processInputWriter;\r\n\r\n    private static Process executeCommand(String[] command) {\r\n        String[] fullCommand;\r\n        if (System.getProperty(\"os.name\").startsWith(\"Windows\")) {\r\n            // Windows\r\n            fullCommand = new String[command.length + 2];\r\n            fullCommand[0] = \"cmd.exe\";\r\n            fullCommand[1] = \"/c\";\r\n            System.arraycopy(command, 0, fullCommand, 2, command.length);\r\n        } else {\r\n            // Unix or Mac\r\n            fullCommand = new String[command.length + 1];\r\n            fullCommand[0] = \"/usr/bin/env\";\r\n            System.arraycopy(command, 0, fullCommand, 1, command.length);\r\n        }\r\n        ProcessBuilder processBuilder = new ProcessBuilder(fullCommand);\r\n        processBuilder.redirectErrorStream(true);\r\n        Process process = null;\r\n        try {\r\n            process = processBuilder.start();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return process;\r\n    }\r\n\r\n    private static void deleteFile(String path) throws FileSystemException {\r\n        File fileToBeDeleted = new File(path);\r\n        boolean result = fileToBeDeleted.delete();\r\n        if (!result) {\r\n            throw new FileSystemException(\"Could not delete temp kts file\");\r\n        }\r\n    }\r\n\r\n    public void sendInputToProcess(String input) {\r\n        processInputWriter.println(input);\r\n        processInputWriter.flush();\r\n    }\r\n\r\n    public void execute(Consumer<String> outputConsumer, Runnable onProgramStart, Runnable onProgramEnd) {\r\n        Process kotlinCompileProcess = executeCommand(new String[]{\"kotlinc\", \"-script\", \"TempKotlin.kts\"});\r\n        processInputWriter = new PrintWriter(kotlinCompileProcess.getOutputStream());\r\n\r\n        new Thread(() -> {\r\n            try {\r\n                onProgramStart.run();\r\n                BufferedReader reader = new BufferedReader(new InputStreamReader(kotlinCompileProcess.getInputStream(), StandardCharsets.UTF_8));\r\n                String line;\r\n\r\n                while ((line = reader.readLine()) != null) {\r\n                    String finalLine = line;\r\n                    outputConsumer.accept(finalLine);\r\n                }\r\n\r\n                int exitCode = kotlinCompileProcess.waitFor();\r\n                outputConsumer.accept(\"Exit code \" + exitCode);\r\n\r\n                onProgramEnd.run();\r\n\r\n                Thread.sleep(1000);\r\n            } catch (IOException | InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n            try {\r\n                deleteFile(\"TempKotlin.kts\");\r\n            } catch (FileSystemException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        }).start();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/demofour/MyExecutor.java b/src/main/java/org/example/demofour/MyExecutor.java
--- a/src/main/java/org/example/demofour/MyExecutor.java	
+++ b/src/main/java/org/example/demofour/MyExecutor.java	
@@ -6,6 +6,7 @@
 import java.util.function.Consumer;
 
 public class MyExecutor {
+    private static final String path = "TempKotlin.kts";
     private PrintWriter processInputWriter;
 
     private static Process executeCommand(String[] command) {
@@ -24,17 +25,17 @@
         }
         ProcessBuilder processBuilder = new ProcessBuilder(fullCommand);
         processBuilder.redirectErrorStream(true);
-        Process process = null;
+        Process process;
         try {
             process = processBuilder.start();
         } catch (IOException e) {
-            e.printStackTrace();
+            throw new RuntimeException("Error with process");
         }
         return process;
     }
 
-    private static void deleteFile(String path) throws FileSystemException {
-        File fileToBeDeleted = new File(path);
+    private static void deleteFile() throws FileSystemException {
+        File fileToBeDeleted = new File(MyExecutor.path);
         boolean result = fileToBeDeleted.delete();
         if (!result) {
             throw new FileSystemException("Could not delete temp kts file");
@@ -57,8 +58,7 @@
                 String line;
 
                 while ((line = reader.readLine()) != null) {
-                    String finalLine = line;
-                    outputConsumer.accept(finalLine);
+                    outputConsumer.accept(line);
                 }
 
                 int exitCode = kotlinCompileProcess.waitFor();
@@ -68,11 +68,11 @@
 
                 Thread.sleep(1000);
             } catch (IOException | InterruptedException e) {
-                e.printStackTrace();
+                throw new RuntimeException("Error occurred during processing");
             }
 
             try {
-                deleteFile("TempKotlin.kts");
+                deleteFile();
             } catch (FileSystemException e) {
                 throw new RuntimeException(e);
             }
Index: src/main/java/org/example/demofour/ExecutorController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.demofour;\r\n\r\nimport javafx.application.Platform;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.ListView;\r\nimport javafx.scene.control.ProgressIndicator;\r\nimport javafx.scene.input.Clipboard;\r\nimport javafx.scene.input.ClipboardContent;\r\nimport javafx.scene.input.KeyCode;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport org.fxmisc.richtext.CodeArea;\r\nimport org.fxmisc.richtext.LineNumberFactory;\r\nimport org.fxmisc.richtext.StyleClassedTextArea;\r\n\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.util.ResourceBundle;\r\nimport java.util.function.IntFunction;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\npublic class ExecutorController implements Initializable {\r\n    private final MyExecutor executor = new MyExecutor();\r\n    public ListView<Label> output;\r\n    public ProgressIndicator progressIndicator;\r\n    @FXML\r\n    private StyleClassedTextArea input;\r\n    @FXML\r\n    private AnchorPane placeForCodeArea;\r\n    private CodeArea codeArea;\r\n    private String sourceCode;\r\n    @FXML\r\n    private Button runButton;\r\n\r\n    @Override\r\n    public void initialize(URL url, ResourceBundle resourceBundle) {\r\n        initializeCodeArea();\r\n        initializeInputField();\r\n        initializeRunButton();\r\n        initializeOutputField();\r\n    }\r\n\r\n    private void initializeOutputField() {\r\n        output.setOnKeyPressed(event -> {\r\n            if (event.isControlDown() && event.getCode() == KeyCode.C) {\r\n                Label selectedLabel = output.getSelectionModel().getSelectedItem();\r\n                if (selectedLabel != null) {\r\n                    final Clipboard clipboard = Clipboard.getSystemClipboard();\r\n                    final ClipboardContent content = new ClipboardContent();\r\n                    content.putString(selectedLabel.getText());\r\n                    clipboard.setContent(content);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private void initializeRunButton() {\r\n        runButton.setOnAction(event -> run());\r\n    }\r\n\r\n    private void initializeInputField() {\r\n        input.setOnKeyPressed(event -> {\r\n            if (event.getCode() == KeyCode.ENTER) {\r\n                String userInput = input.getText();\r\n                for (String str : userInput.split(\"\\\\R\")) {\r\n                    executor.sendInputToProcess(str);\r\n                }\r\n                input.clear();\r\n                event.consume();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void initializeCodeArea() {\r\n        codeArea = new CodeArea();\r\n        IntFunction<Node> numberFactory = LineNumberFactory.get(codeArea);\r\n        codeArea.setParagraphGraphicFactory(numberFactory);\r\n\r\n        AnchorPane.setTopAnchor(codeArea, 0d);\r\n        AnchorPane.setBottomAnchor(codeArea, 0d);\r\n        AnchorPane.setLeftAnchor(codeArea, 0d);\r\n        AnchorPane.setRightAnchor(codeArea, 0d);\r\n\r\n        placeForCodeArea.getChildren().add(codeArea);\r\n\r\n        codeArea.getStylesheets().add(getClass().getResource(\"/styles.css\").toExternalForm());\r\n        codeArea.richChanges()\r\n                .filter(ch -> !ch.getInserted().equals(ch.getRemoved())) // ignore style changes\r\n                .subscribe(change -> {\r\n                    codeArea.setStyleSpans(0, SyntaxHighlight.computeHighlighting(codeArea.getText()));\r\n                });\r\n        for (int i = 0; i < 50; i++) {\r\n            codeArea.appendText(\"\\n\");\r\n        }\r\n    }\r\n\r\n    private void run() {\r\n        sourceCode = codeArea.getText();\r\n        generateKotlin(sourceCode);\r\n\r\n        changeIndicatorState(true);\r\n        runButton.setVisible(false);\r\n        executor.execute(\r\n                this::addLineToConsole,\r\n                this::onProgramStart,\r\n                this::onProgramEnd);\r\n    }\r\n\r\n    private void addLineToConsole(String lines) {\r\n        for (String line : lines.split(\"\\n\")) {\r\n            Label textField = new Label(line);\r\n            Pattern errorPattern = Pattern.compile(\".*\\\\.kts:(\\\\d+):\\\\d+: .*\");\r\n            Matcher errorMatcher = errorPattern.matcher(line);\r\n            Pattern exceptionPattern = Pattern.compile(\".*\\\\.kts:(\\\\d+).*\");\r\n            Matcher exceptionMatcher = exceptionPattern.matcher(line);\r\n            Platform.runLater(() -> {\r\n                textField.setOnMouseClicked((event) -> errorLabelOnClick(line, errorPattern, exceptionPattern));\r\n                output.getItems().add(textField);\r\n            });\r\n\r\n            if (errorMatcher.find()) {\r\n                textField.setStyle(\"-fx-text-fill: red;\");\r\n            }\r\n\r\n            if (exceptionMatcher.find()) {\r\n                textField.setStyle(\"-fx-text-fill: red;\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private void errorLabelOnClick(String line, Pattern errorPattern, Pattern exceptionPattern) {\r\n        Matcher errorMatcher = errorPattern.matcher(line);\r\n        if (errorMatcher.find()) {\r\n            int lineNumber = Integer.parseInt(errorMatcher.group(1));\r\n            moveToErrorLine(lineNumber);\r\n        }\r\n\r\n        Matcher exceptionMatcher = exceptionPattern.matcher(line);\r\n        if (exceptionMatcher.find()) {\r\n            int lineNumber = Integer.parseInt(exceptionMatcher.group(1));\r\n            moveToErrorLine(lineNumber);\r\n        }\r\n    }\r\n\r\n    private void onProgramStart() {\r\n        Platform.runLater(() -> output.getItems().clear());\r\n    }\r\n\r\n    private void onProgramEnd() {\r\n        Platform.runLater(() -> {\r\n            changeIndicatorState(false);\r\n            runButton.setVisible(true);\r\n        });\r\n    }\r\n\r\n    private void moveToErrorLine(int lineNumber) {\r\n        Platform.runLater(() -> {\r\n            codeArea.showParagraphAtTop(lineNumber - 1);\r\n            codeArea.moveTo(lineNumber - 1, 0);\r\n        });\r\n    }\r\n\r\n    private void generateKotlin(String sourceCode) {\r\n        File file = new File(\"TempKotlin.kts\");\r\n        try (FileWriter writer = new FileWriter(file)) {\r\n            writer.write(sourceCode);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void changeIndicatorState(Boolean visible) {\r\n        progressIndicator.setVisible(visible);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/demofour/ExecutorController.java b/src/main/java/org/example/demofour/ExecutorController.java
--- a/src/main/java/org/example/demofour/ExecutorController.java	
+++ b/src/main/java/org/example/demofour/ExecutorController.java	
@@ -20,6 +20,7 @@
 import java.io.FileWriter;
 import java.io.IOException;
 import java.net.URL;
+import java.util.Objects;
 import java.util.ResourceBundle;
 import java.util.function.IntFunction;
 import java.util.regex.Matcher;
@@ -34,7 +35,6 @@
     @FXML
     private AnchorPane placeForCodeArea;
     private CodeArea codeArea;
-    private String sourceCode;
     @FXML
     private Button runButton;
 
@@ -89,19 +89,17 @@
 
         placeForCodeArea.getChildren().add(codeArea);
 
-        codeArea.getStylesheets().add(getClass().getResource("/styles.css").toExternalForm());
+        codeArea.getStylesheets().add(Objects.requireNonNull(getClass().getResource("/styles.css")).toExternalForm());
         codeArea.richChanges()
-                .filter(ch -> !ch.getInserted().equals(ch.getRemoved())) // ignore style changes
-                .subscribe(change -> {
-                    codeArea.setStyleSpans(0, SyntaxHighlight.computeHighlighting(codeArea.getText()));
-                });
+                .filter(ch -> !ch.getInserted().equals(ch.getRemoved()))
+                .subscribe(change -> codeArea.setStyleSpans(0, SyntaxHighlight.computeHighlighting(codeArea.getText())));
         for (int i = 0; i < 50; i++) {
             codeArea.appendText("\n");
         }
     }
 
     private void run() {
-        sourceCode = codeArea.getText();
+        String sourceCode = codeArea.getText();
         generateKotlin(sourceCode);
 
         changeIndicatorState(true);
@@ -171,7 +169,7 @@
         try (FileWriter writer = new FileWriter(file)) {
             writer.write(sourceCode);
         } catch (IOException e) {
-            e.printStackTrace();
+            throw new RuntimeException("Problem with file");
         }
     }
 
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"VcsDirectoryMappings\">\r\n    <mapping directory=\"$PROJECT_DIR$\" vcs=\"Git\" />\r\n    <mapping directory=\"$PROJECT_DIR$/src/main/java/org/example/demofour/executor\" vcs=\"Git\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
--- a/.idea/vcs.xml	
+++ b/.idea/vcs.xml	
@@ -2,6 +2,5 @@
 <project version="4">
   <component name="VcsDirectoryMappings">
     <mapping directory="$PROJECT_DIR$" vcs="Git" />
-    <mapping directory="$PROJECT_DIR$/src/main/java/org/example/demofour/executor" vcs="Git" />
   </component>
 </project>
\ No newline at end of file
